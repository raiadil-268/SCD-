import tkinter as tk
from tkinter import ttk, messagebox

class Book:
    def __init__(self, title: str, author: str, isbn: str):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.available = True

class EBook(Book):
    def __init__(self, title: str, author: str, isbn: str, download_size: float):
        super().__init__(title, author, isbn)
        self.download_size = download_size

class Library:
    def __init__(self):
        self.books = []
        self.ebooks = []

    def add_book(self, book: Book) -> None:
        if isinstance(book, EBook):
            self.ebooks.append(book)
        else:
            self.books.append(book)

class LibraryGUI:
    def __init__(self, root):
        self.root = root
        self.library = Library()
        self.root.title('Library Management System')

        # Main frame
        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Title
        title_label = ttk.Label(main_frame, text="Library Management System", font=('Helvetica', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=10)

        # Input fields
        ttk.Label(main_frame, text="Title:").grid(row=1, column=0, sticky=tk.W)
        self.title_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.title_var).grid(row=1, column=1, sticky=(tk.W, tk.E))

        ttk.Label(main_frame, text="Author:").grid(row=2, column=0, sticky=tk.W)
        self.author_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.author_var).grid(row=2, column=1, sticky=(tk.W, tk.E))

        ttk.Label(main_frame, text="ISBN:").grid(row=3, column=0, sticky=tk.W)
        self.isbn_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.isbn_var).grid(row=3, column=1, sticky=(tk.W, tk.E))

        # eBook checkbox and size field
        self.is_ebook = tk.BooleanVar()
        ttk.Checkbutton(main_frame, text="Is eBook", variable=self.is_ebook, 
                       command=self.toggle_size_field).grid(row=4, column=0, columnspan=2, sticky=tk.W)

        self.size_label = ttk.Label(main_frame, text="Download Size (MB):")
        self.size_label.grid(row=5, column=0, sticky=tk.W)
        self.size_var = tk.StringVar()
        self.size_entry = ttk.Entry(main_frame, textvariable=self.size_var, state='disabled')
        self.size_entry.grid(row=5, column=1, sticky=(tk.W, tk.E))

        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=10)

        ttk.Button(button_frame, text="Add Book", command=self.add_book).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Clear Fields", command=self.clear_fields).pack(side=tk.LEFT)

        # Status label
        self.status_var = tk.StringVar()
        ttk.Label(main_frame, textvariable=self.status_var).grid(row=7, column=0, columnspan=2)

    def toggle_size_field(self):
        if self.is_ebook.get():
            self.size_entry.configure(state='normal')
        else:
            self.size_entry.configure(state='disabled')
            self.size_var.set('')

    def clear_fields(self):
        self.title_var.set('')
        self.author_var.set('')
        self.isbn_var.set('')
        self.size_var.set('')
        self.is_ebook.set(False)
        self.status_var.set('')
        self.size_entry.configure(state='disabled')

    def add_book(self):
        title = self.title_var.get().strip()
        author = self.author_var.get().strip()
        isbn = self.isbn_var.get().strip()

        if not all([title, author, isbn]):
            messagebox.showerror('Error', 'Please fill all required fields')
            return

        try:
            if self.is_ebook.get():
                try:
                    size = float(self.size_var.get())
                    if size <= 0:
                        raise ValueError
                    book = EBook(title, author, isbn, size)
                except ValueError:
                    messagebox.showerror('Error', 'Please enter a valid download size')
                    return
            else:
                book = Book(title, author, isbn)

            self.library.add_book(book)
            self.status_var.set(f'Successfully added: {title}')
            self.clear_fields()

        except Exception as e:
            messagebox.showerror('Error', f'Failed to add book: {str(e)}')

if __name__ == '__main__':
    root = tk.Tk()
    app = LibraryGUI(root)
    root.mainloop()
